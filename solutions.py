'''
Question 1
Write some code that generates a file containing containing rows containing the following data:

i, fibonacci_i, factorial_i, gcd_fibonacci_i_factorial_i
where:

i: integer values from 0 to 100
fibonacci_i: the ith Fibonacci number
factorial_i: the factorial of i (i!)
gcd_fib_i_fact_i: the greatest common denominator of the ith Fibonacci number and i!
Hint: look at the math.factorial and math.gcd functions in the Python docs

Also make sure to include a header row in your file.

For example, the first few rows in your file should contain this data:

i,fib,fact,gcd
0,1,1,1
1,1,1,1
2,2,2,2
3,3,6,3
4,5,24,1
5,8,120,8
Solution
Let's start by writing or importing the function's we'll need to calculate

the Fibonacci numbers (I'll use the sequence 1, 1, 2, 3, 5, ... where the first number will be indexed as 0. Also, we'll use the lru_cache decorator to speed up our recursive algorithm.
the factorial of i (using the math.factorial function)
the greatest common denominator (using the math.gcd function)
from functools import lru_cache
from math import factorial, gcd
@lru_cache
def fib(i):
    if i in {0, 1}:
        return 1
    else:
        return fib(i-1) + fib(i-2)
Let's call the fib function and make sure it outputs the expected results:

[fib(i) for i in range(10)]
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
We could then generate the data we'll need to eventually write to a file as follows:

n = 10  # later we can change this to 100
for i in range(n):
    print(i, fib(i), factorial(i), gcd(fib(i), factorial(i)))
0 1 1 1
1 1 1 1
2 2 2 2
3 3 6 3
4 5 24 1
5 8 120 8
6 13 720 1
7 21 5040 21
8 34 40320 2
9 55 362880 5
Of course, we actually need this data as a single string that can be written to a file. To do this, we can join the string representations of each number:

n = 10  # later we can change this to 100
for i in range(n):
    data = [i, fib(i), factorial(i), gcd(fib(i), factorial(i))]
    row = ','.join([str(data[0]), str(data[1]), str(data[2]), str(data[3])])
    print(row)
0,1,1,1
1,1,1,1
2,2,2,2
3,3,6,3
4,5,24,1
5,8,120,8
6,13,720,1
7,21,5040,21
8,34,40320,2
9,55,362880,5
This works, but applying the str function to each element of data individually is not very elegant.

Instead we can use the map function:

n = 10  # later we can change this to 100
for i in range(n):
    data = [i, fib(i), factorial(i), gcd(fib(i), factorial(i))]
    row = ','.join(map(str, data))
    print(row)
0,1,1,1
1,1,1,1
2,2,2,2
3,3,6,3
4,5,24,1
5,8,120,8
6,13,720,1
7,21,5040,21
8,34,40320,2
9,55,362880,5
We can now use this to write data to a file.

file_name = 'data.csv'

headers = ('i', 'fib' ,'fact', 'gcd')

n = 100

with open(file_name, 'w') as f:
    f.write(','.join(headers))
    f.write('\n')
    for i in range(n):
        data = [i, fib(i), factorial(i), gcd(fib(i), factorial(i))]
        row = ','.join(map(str, data))
        f.write(row)
        f.write('\n')
Go ahead and open that file in some text editor and check its content.

Question 2
Using the file you just generated, write three functions:

fib
fact
gcd_fib_fact
that perform the same calculations as our original fib function, the math module's factorial and the gcd of the corresponding fibonacci and factorial numbers, but uses the data that was saved in the file as a cache/lookup mechanism - i.e. just use the numbers in the file if they are available, otherwise make the calculation.

Solution
The easiest approach will probably be to load up the data form the file and store it some lists that we can easily lookup.

We could do this inside each function we are going to create, but here I'm going to load up the data into our notebook, and pass the relevant data to each function - this avoids re-loading the data form file each time the function is called.

with open(file_name) as f:
    next(f)  # skip header row
    for row in f:
        print(row)
0,1,1,1

1,1,1,1

2,2,2,2

3,3,6,3

4,5,24,1

5,8,120,8

6,13,720,1

7,21,5040,21

8,34,40320,2

9,55,362880,5

10,89,3628800,1

11,144,39916800,144

12,233,479001600,1

13,377,6227020800,13

14,610,87178291200,10

15,987,1307674368000,21

16,1597,20922789888000,1

17,2584,355687428096000,136

18,4181,6402373705728000,1

19,6765,121645100408832000,165

20,10946,2432902008176640000,26

21,17711,51090942171709440000,1

22,28657,1124000727777607680000,1

23,46368,25852016738884976640000,46368

24,75025,620448401733239439360000,25

25,121393,15511210043330985984000000,1

26,196418,403291461126605635584000000,34

27,317811,10888869450418352160768000000,39

28,514229,304888344611713860501504000000,1

29,832040,8841761993739701954543616000000,440

30,1346269,265252859812191058636308480000000,1

31,2178309,8222838654177922817725562880000000,21

32,3524578,263130836933693530167218012160000000,2

33,5702887,8683317618811886495518194401280000000,1

34,9227465,295232799039604140847618609643520000000,65

35,14930352,10333147966386144929666651337523200000000,139536

36,24157817,371993326789901217467999448150835200000000,1

37,39088169,13763753091226345046315979581580902400000000,37

38,63245986,523022617466601111760007224100074291200000000,2

39,102334155,20397882081197443358640281739902897356800000000,1155

40,165580141,815915283247897734345611269596115894272000000000,1

41,267914296,33452526613163807108170062053440751665152000000000,3016

42,433494437,1405006117752879898543142606244511569936384000000000,1

43,701408733,60415263063373835637355132068513997507264512000000000,129

44,1134903170,2658271574788448768043625811014615890319638528000000000,170

45,1836311903,119622220865480194561963161495657715064383733760000000000,1

46,2971215073,5502622159812088949850305428800254892961651752960000000000,1

47,4807526976,258623241511168180642964355153611979969197632389120000000000,4358592

48,7778742049,12413915592536072670862289047373375038521486354677760000000000,13

49,12586269025,608281864034267560872252163321295376887552831379210240000000000,275

50,20365011074,30414093201713378043612608166064768844377641568960512000000000000,2

51,32951280099,1551118753287382280224243016469303211063259720016986112000000000000,3

52,53316291173,80658175170943878571660636856403766975289505440883277824000000000000,1

53,86267571272,4274883284060025564298013753389399649690343788366813724672000000000000,136952

54,139583862445,230843697339241380472092742683027581083278564571807941132288000000000000,5

55,225851433717,12696403353658275925965100847566516959580321051449436762275840000000000000,55419

56,365435296162,710998587804863451854045647463724949736497978881168458687447040000000000000,74

57,591286729879,40526919504877216755680601905432322134980384796226602145184481280000000000000,1

58,956722026041,2350561331282878571829474910515074683828862318181142924420699914240000000000000,1

59,1548008755920,138683118545689835737939019720389406345902876772687432540821294940160000000000000,10066320

60,2504730781961,8320987112741390144276341183223364380754172606361245952449277696409600000000000000,1

61,4052739537881,507580213877224798800856812176625227226004528988036003099405939480985600000000000000,1

62,6557470319842,31469973260387937525653122354950764088012280797258232192163168247821107200000000000000,442

63,10610209857723,1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000,987

64,17167680177565,126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000,5

65,27777890035288,8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000,8

66,44945570212853,544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000,1

67,72723460248141,36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000,201

68,117669030460994,2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000,2

69,190392490709135,171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000,20735

70,308061521170129,11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000,1

71,498454011879264,850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000,44930592

72,806515533049393,61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000,1

73,1304969544928657,4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000,73

74,2111485077978050,330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000,3050

75,3416454622906707,24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000,111

76,5527939700884757,1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000,13

77,8944394323791464,145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000,8

78,14472334024676221,11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000,1

79,23416728348467685,894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000,2225685

80,37889062373143906,71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000,1802

81,61305790721611591,5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000,1

82,99194853094755497,475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000,1

83,160500643816367088,39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000,4505904

84,259695496911122585,3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000,5

85,420196140727489673,281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000,1

86,679891637638612258,24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000,2

87,1100087778366101931,2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000,903

88,1779979416004714189,185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000,1

89,2880067194370816120,16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000,268748920

90,4660046610375530309,1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000,169

91,7540113804746346429,135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000,3

92,12200160415121876738,12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000,2

93,19740274219868223167,1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000,1

94,31940434634990099905,108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000,185

95,51680708854858323072,10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000,8717184

96,83621143489848422977,991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000,1

97,135301852344706746049,96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000,36569

98,218922995834555169026,9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000,3026

99,354224848179261915075,933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000,33825

So a few things:

we should strip each row
we'll need to split each row (on ,), and cast each of the strings to integers
with open(file_name) as f:
    next(f)  # skip header row
    for row in f:
        print(row.strip())
0,1,1,1
1,1,1,1
2,2,2,2
3,3,6,3
4,5,24,1
5,8,120,8
6,13,720,1
7,21,5040,21
8,34,40320,2
9,55,362880,5
10,89,3628800,1
11,144,39916800,144
12,233,479001600,1
13,377,6227020800,13
14,610,87178291200,10
15,987,1307674368000,21
16,1597,20922789888000,1
17,2584,355687428096000,136
18,4181,6402373705728000,1
19,6765,121645100408832000,165
20,10946,2432902008176640000,26
21,17711,51090942171709440000,1
22,28657,1124000727777607680000,1
23,46368,25852016738884976640000,46368
24,75025,620448401733239439360000,25
25,121393,15511210043330985984000000,1
26,196418,403291461126605635584000000,34
27,317811,10888869450418352160768000000,39
28,514229,304888344611713860501504000000,1
29,832040,8841761993739701954543616000000,440
30,1346269,265252859812191058636308480000000,1
31,2178309,8222838654177922817725562880000000,21
32,3524578,263130836933693530167218012160000000,2
33,5702887,8683317618811886495518194401280000000,1
34,9227465,295232799039604140847618609643520000000,65
35,14930352,10333147966386144929666651337523200000000,139536
36,24157817,371993326789901217467999448150835200000000,1
37,39088169,13763753091226345046315979581580902400000000,37
38,63245986,523022617466601111760007224100074291200000000,2
39,102334155,20397882081197443358640281739902897356800000000,1155
40,165580141,815915283247897734345611269596115894272000000000,1
41,267914296,33452526613163807108170062053440751665152000000000,3016
42,433494437,1405006117752879898543142606244511569936384000000000,1
43,701408733,60415263063373835637355132068513997507264512000000000,129
44,1134903170,2658271574788448768043625811014615890319638528000000000,170
45,1836311903,119622220865480194561963161495657715064383733760000000000,1
46,2971215073,5502622159812088949850305428800254892961651752960000000000,1
47,4807526976,258623241511168180642964355153611979969197632389120000000000,4358592
48,7778742049,12413915592536072670862289047373375038521486354677760000000000,13
49,12586269025,608281864034267560872252163321295376887552831379210240000000000,275
50,20365011074,30414093201713378043612608166064768844377641568960512000000000000,2
51,32951280099,1551118753287382280224243016469303211063259720016986112000000000000,3
52,53316291173,80658175170943878571660636856403766975289505440883277824000000000000,1
53,86267571272,4274883284060025564298013753389399649690343788366813724672000000000000,136952
54,139583862445,230843697339241380472092742683027581083278564571807941132288000000000000,5
55,225851433717,12696403353658275925965100847566516959580321051449436762275840000000000000,55419
56,365435296162,710998587804863451854045647463724949736497978881168458687447040000000000000,74
57,591286729879,40526919504877216755680601905432322134980384796226602145184481280000000000000,1
58,956722026041,2350561331282878571829474910515074683828862318181142924420699914240000000000000,1
59,1548008755920,138683118545689835737939019720389406345902876772687432540821294940160000000000000,10066320
60,2504730781961,8320987112741390144276341183223364380754172606361245952449277696409600000000000000,1
61,4052739537881,507580213877224798800856812176625227226004528988036003099405939480985600000000000000,1
62,6557470319842,31469973260387937525653122354950764088012280797258232192163168247821107200000000000000,442
63,10610209857723,1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000,987
64,17167680177565,126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000,5
65,27777890035288,8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000,8
66,44945570212853,544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000,1
67,72723460248141,36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000,201
68,117669030460994,2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000,2
69,190392490709135,171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000,20735
70,308061521170129,11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000,1
71,498454011879264,850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000,44930592
72,806515533049393,61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000,1
73,1304969544928657,4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000,73
74,2111485077978050,330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000,3050
75,3416454622906707,24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000,111
76,5527939700884757,1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000,13
77,8944394323791464,145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000,8
78,14472334024676221,11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000,1
79,23416728348467685,894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000,2225685
80,37889062373143906,71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000,1802
81,61305790721611591,5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000,1
82,99194853094755497,475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000,1
83,160500643816367088,39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000,4505904
84,259695496911122585,3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000,5
85,420196140727489673,281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000,1
86,679891637638612258,24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000,2
87,1100087778366101931,2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000,903
88,1779979416004714189,185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000,1
89,2880067194370816120,16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000,268748920
90,4660046610375530309,1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000,169
91,7540113804746346429,135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000,3
92,12200160415121876738,12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000,2
93,19740274219868223167,1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000,1
94,31940434634990099905,108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000,185
95,51680708854858323072,10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000,8717184
96,83621143489848422977,991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000,1
97,135301852344706746049,96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000,36569
98,218922995834555169026,9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000,3026
99,354224848179261915075,933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000,33825
Then split on the comma:

with open(file_name) as f:
    next(f)  # skip header row
    for row in f:
        print(row.strip().split(','))
['0', '1', '1', '1']
['1', '1', '1', '1']
['2', '2', '2', '2']
['3', '3', '6', '3']
['4', '5', '24', '1']
['5', '8', '120', '8']
['6', '13', '720', '1']
['7', '21', '5040', '21']
['8', '34', '40320', '2']
['9', '55', '362880', '5']
['10', '89', '3628800', '1']
['11', '144', '39916800', '144']
['12', '233', '479001600', '1']
['13', '377', '6227020800', '13']
['14', '610', '87178291200', '10']
['15', '987', '1307674368000', '21']
['16', '1597', '20922789888000', '1']
['17', '2584', '355687428096000', '136']
['18', '4181', '6402373705728000', '1']
['19', '6765', '121645100408832000', '165']
['20', '10946', '2432902008176640000', '26']
['21', '17711', '51090942171709440000', '1']
['22', '28657', '1124000727777607680000', '1']
['23', '46368', '25852016738884976640000', '46368']
['24', '75025', '620448401733239439360000', '25']
['25', '121393', '15511210043330985984000000', '1']
['26', '196418', '403291461126605635584000000', '34']
['27', '317811', '10888869450418352160768000000', '39']
['28', '514229', '304888344611713860501504000000', '1']
['29', '832040', '8841761993739701954543616000000', '440']
['30', '1346269', '265252859812191058636308480000000', '1']
['31', '2178309', '8222838654177922817725562880000000', '21']
['32', '3524578', '263130836933693530167218012160000000', '2']
['33', '5702887', '8683317618811886495518194401280000000', '1']
['34', '9227465', '295232799039604140847618609643520000000', '65']
['35', '14930352', '10333147966386144929666651337523200000000', '139536']
['36', '24157817', '371993326789901217467999448150835200000000', '1']
['37', '39088169', '13763753091226345046315979581580902400000000', '37']
['38', '63245986', '523022617466601111760007224100074291200000000', '2']
['39', '102334155', '20397882081197443358640281739902897356800000000', '1155']
['40', '165580141', '815915283247897734345611269596115894272000000000', '1']
['41', '267914296', '33452526613163807108170062053440751665152000000000', '3016']
['42', '433494437', '1405006117752879898543142606244511569936384000000000', '1']
['43', '701408733', '60415263063373835637355132068513997507264512000000000', '129']
['44', '1134903170', '2658271574788448768043625811014615890319638528000000000', '170']
['45', '1836311903', '119622220865480194561963161495657715064383733760000000000', '1']
['46', '2971215073', '5502622159812088949850305428800254892961651752960000000000', '1']
['47', '4807526976', '258623241511168180642964355153611979969197632389120000000000', '4358592']
['48', '7778742049', '12413915592536072670862289047373375038521486354677760000000000', '13']
['49', '12586269025', '608281864034267560872252163321295376887552831379210240000000000', '275']
['50', '20365011074', '30414093201713378043612608166064768844377641568960512000000000000', '2']
['51', '32951280099', '1551118753287382280224243016469303211063259720016986112000000000000', '3']
['52', '53316291173', '80658175170943878571660636856403766975289505440883277824000000000000', '1']
['53', '86267571272', '4274883284060025564298013753389399649690343788366813724672000000000000', '136952']
['54', '139583862445', '230843697339241380472092742683027581083278564571807941132288000000000000', '5']
['55', '225851433717', '12696403353658275925965100847566516959580321051449436762275840000000000000', '55419']
['56', '365435296162', '710998587804863451854045647463724949736497978881168458687447040000000000000', '74']
['57', '591286729879', '40526919504877216755680601905432322134980384796226602145184481280000000000000', '1']
['58', '956722026041', '2350561331282878571829474910515074683828862318181142924420699914240000000000000', '1']
['59', '1548008755920', '138683118545689835737939019720389406345902876772687432540821294940160000000000000', '10066320']
['60', '2504730781961', '8320987112741390144276341183223364380754172606361245952449277696409600000000000000', '1']
['61', '4052739537881', '507580213877224798800856812176625227226004528988036003099405939480985600000000000000', '1']
['62', '6557470319842', '31469973260387937525653122354950764088012280797258232192163168247821107200000000000000', '442']
['63', '10610209857723', '1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000', '987']
['64', '17167680177565', '126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000', '5']
['65', '27777890035288', '8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000', '8']
['66', '44945570212853', '544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000', '1']
['67', '72723460248141', '36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000', '201']
['68', '117669030460994', '2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000', '2']
['69', '190392490709135', '171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000', '20735']
['70', '308061521170129', '11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000', '1']
['71', '498454011879264', '850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000', '44930592']
['72', '806515533049393', '61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000', '1']
['73', '1304969544928657', '4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000', '73']
['74', '2111485077978050', '330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000', '3050']
['75', '3416454622906707', '24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000', '111']
['76', '5527939700884757', '1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000', '13']
['77', '8944394323791464', '145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000', '8']
['78', '14472334024676221', '11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000', '1']
['79', '23416728348467685', '894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000', '2225685']
['80', '37889062373143906', '71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000', '1802']
['81', '61305790721611591', '5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000', '1']
['82', '99194853094755497', '475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000', '1']
['83', '160500643816367088', '39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000', '4505904']
['84', '259695496911122585', '3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000', '5']
['85', '420196140727489673', '281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000', '1']
['86', '679891637638612258', '24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000', '2']
['87', '1100087778366101931', '2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000', '903']
['88', '1779979416004714189', '185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000', '1']
['89', '2880067194370816120', '16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000', '268748920']
['90', '4660046610375530309', '1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000', '169']
['91', '7540113804746346429', '135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000', '3']
['92', '12200160415121876738', '12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000', '2']
['93', '19740274219868223167', '1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000', '1']
['94', '31940434634990099905', '108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000', '185']
['95', '51680708854858323072', '10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000', '8717184']
['96', '83621143489848422977', '991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000', '1']
['97', '135301852344706746049', '96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000', '36569']
['98', '218922995834555169026', '9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000', '3026']
['99', '354224848179261915075', '933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000', '33825']
And finally make each item an integer - we'll use the map function again:

with open(file_name) as f:
    next(f)  # skip header row
    for row in f:
        print(list(map(int, row.strip().split(','))))
[0, 1, 1, 1]
[1, 1, 1, 1]
[2, 2, 2, 2]
[3, 3, 6, 3]
[4, 5, 24, 1]
[5, 8, 120, 8]
[6, 13, 720, 1]
[7, 21, 5040, 21]
[8, 34, 40320, 2]
[9, 55, 362880, 5]
[10, 89, 3628800, 1]
[11, 144, 39916800, 144]
[12, 233, 479001600, 1]
[13, 377, 6227020800, 13]
[14, 610, 87178291200, 10]
[15, 987, 1307674368000, 21]
[16, 1597, 20922789888000, 1]
[17, 2584, 355687428096000, 136]
[18, 4181, 6402373705728000, 1]
[19, 6765, 121645100408832000, 165]
[20, 10946, 2432902008176640000, 26]
[21, 17711, 51090942171709440000, 1]
[22, 28657, 1124000727777607680000, 1]
[23, 46368, 25852016738884976640000, 46368]
[24, 75025, 620448401733239439360000, 25]
[25, 121393, 15511210043330985984000000, 1]
[26, 196418, 403291461126605635584000000, 34]
[27, 317811, 10888869450418352160768000000, 39]
[28, 514229, 304888344611713860501504000000, 1]
[29, 832040, 8841761993739701954543616000000, 440]
[30, 1346269, 265252859812191058636308480000000, 1]
[31, 2178309, 8222838654177922817725562880000000, 21]
[32, 3524578, 263130836933693530167218012160000000, 2]
[33, 5702887, 8683317618811886495518194401280000000, 1]
[34, 9227465, 295232799039604140847618609643520000000, 65]
[35, 14930352, 10333147966386144929666651337523200000000, 139536]
[36, 24157817, 371993326789901217467999448150835200000000, 1]
[37, 39088169, 13763753091226345046315979581580902400000000, 37]
[38, 63245986, 523022617466601111760007224100074291200000000, 2]
[39, 102334155, 20397882081197443358640281739902897356800000000, 1155]
[40, 165580141, 815915283247897734345611269596115894272000000000, 1]
[41, 267914296, 33452526613163807108170062053440751665152000000000, 3016]
[42, 433494437, 1405006117752879898543142606244511569936384000000000, 1]
[43, 701408733, 60415263063373835637355132068513997507264512000000000, 129]
[44, 1134903170, 2658271574788448768043625811014615890319638528000000000, 170]
[45, 1836311903, 119622220865480194561963161495657715064383733760000000000, 1]
[46, 2971215073, 5502622159812088949850305428800254892961651752960000000000, 1]
[47, 4807526976, 258623241511168180642964355153611979969197632389120000000000, 4358592]
[48, 7778742049, 12413915592536072670862289047373375038521486354677760000000000, 13]
[49, 12586269025, 608281864034267560872252163321295376887552831379210240000000000, 275]
[50, 20365011074, 30414093201713378043612608166064768844377641568960512000000000000, 2]
[51, 32951280099, 1551118753287382280224243016469303211063259720016986112000000000000, 3]
[52, 53316291173, 80658175170943878571660636856403766975289505440883277824000000000000, 1]
[53, 86267571272, 4274883284060025564298013753389399649690343788366813724672000000000000, 136952]
[54, 139583862445, 230843697339241380472092742683027581083278564571807941132288000000000000, 5]
[55, 225851433717, 12696403353658275925965100847566516959580321051449436762275840000000000000, 55419]
[56, 365435296162, 710998587804863451854045647463724949736497978881168458687447040000000000000, 74]
[57, 591286729879, 40526919504877216755680601905432322134980384796226602145184481280000000000000, 1]
[58, 956722026041, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1]
[59, 1548008755920, 138683118545689835737939019720389406345902876772687432540821294940160000000000000, 10066320]
[60, 2504730781961, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1]
[61, 4052739537881, 507580213877224798800856812176625227226004528988036003099405939480985600000000000000, 1]
[62, 6557470319842, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 442]
[63, 10610209857723, 1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000, 987]
[64, 17167680177565, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 5]
[65, 27777890035288, 8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000, 8]
[66, 44945570212853, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 1]
[67, 72723460248141, 36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000, 201]
[68, 117669030460994, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2]
[69, 190392490709135, 171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000, 20735]
[70, 308061521170129, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 1]
[71, 498454011879264, 850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000, 44930592]
[72, 806515533049393, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 1]
[73, 1304969544928657, 4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000, 73]
[74, 2111485077978050, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 3050]
[75, 3416454622906707, 24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000, 111]
[76, 5527939700884757, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 13]
[77, 8944394323791464, 145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000, 8]
[78, 14472334024676221, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 1]
[79, 23416728348467685, 894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000, 2225685]
[80, 37889062373143906, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 1802]
[81, 61305790721611591, 5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000, 1]
[82, 99194853094755497, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 1]
[83, 160500643816367088, 39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000, 4505904]
[84, 259695496911122585, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 5]
[85, 420196140727489673, 281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000, 1]
[86, 679891637638612258, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 2]
[87, 1100087778366101931, 2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000, 903]
[88, 1779979416004714189, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 1]
[89, 2880067194370816120, 16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000, 268748920]
[90, 4660046610375530309, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 169]
[91, 7540113804746346429, 135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000, 3]
[92, 12200160415121876738, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 2]
[93, 19740274219868223167, 1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000, 1]
[94, 31940434634990099905, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 185]
[95, 51680708854858323072, 10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000, 8717184]
[96, 83621143489848422977, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 1]
[97, 135301852344706746049, 96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000, 36569]
[98, 218922995834555169026, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 3026]
[99, 354224848179261915075, 933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000, 33825]
Finally, let's store those values into a list (of lists).

We could do it this way:

data = []

with open(file_name) as f:
    next(f)  # skip header row
    for row in f:
        data.append(list(map(int, row.strip().split(','))))

print(data[:10])
[[0, 1, 1, 1], [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 6, 3], [4, 5, 24, 1], [5, 8, 120, 8], [6, 13, 720, 1], [7, 21, 5040, 21], [8, 34, 40320, 2], [9, 55, 362880, 5]]
But, we can also just use a comprehension:

with open(file_name) as f:
    next(f)  # skip header row
    data = [list(map(int, row.strip().split(','))) for row in f]

print(data[:10])
[[0, 1, 1, 1], [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 6, 3], [4, 5, 24, 1], [5, 8, 120, 8], [6, 13, 720, 1], [7, 21, 5040, 21], [8, 34, 40320, 2], [9, 55, 362880, 5]]
Now that we have our pre-calculated data, let's create individual sequences for Fibonacci, factorial and gcd numbers:

fib_stored = [row[1] for row in data]
fact_stored = [row[2] for row in data]
gcd_stored = [row[3] for row in data]
Finally, we can write our functions, starting with fact:

def fact(i):
    if i < len(fact_stored):
        print('looking up fact in cache...')
        return fact_stored[i]
    else:
        return factorial(i)
fact(10)
looking up fact in cache...
3628800
We can do something similar for Fibonacci numbers:

def fib(i):
    if i < len(fib_stored):
        print('looking up fib in cache...')
        return fib_stored[i]
    else:
        # not cached - so we need to calculate it
        if i in {0, 1}:
            return 1
        else:
            return fib(i-1) + fib(i-2)
Before we run this, let's make sure we apply an lru_cache to it as well:

@lru_cache
def fib(i):
    if i < len(fib_stored):
        print('looking up in cache...')
        return fib_stored[i]
    else:
        # not cached - so we need to calculate it
        if i in {0, 1}:
            return 1
        else:
            return fib(i-1) + fib(i-2)
fib(10)
looking up in cache...
89
fib(101)
looking up in cache...
looking up in cache...
927372692193078999176
You'll notice that to calculate fib(101) required calculating fib(100) + fib(99), which were both in our loaded data - hence why we see two looking up fib in cache... prints in our output.

Finally, we can process gcd in the same way:

def gcd_fib_fact(i):
    if i < len(gcd_stored):
        print('Looking up gcd in cache...')
        return gcd_stored[i]
    else:
        return gcd(fact(i), fib(i))
gcd_fib_fact(11)
Looking up gcd in cache...
144
gcd_fib_fact(101)
8

'''